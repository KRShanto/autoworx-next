generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Company model.
// Every user belongs to a company.
// For now, every user has to create their own company when registering.
// In the future, we can add a feature to join a company.
model Company {
  id                      Int                       @id @default(autoincrement())
  name                    String
  businessId              String?                   @map("business_id")
  businessType            String?                   @map("business_type")
  phone                   String?
  industry                String?
  website                 String?
  address                 String?
  city                    String?
  state                   String?
  zip                     String?
  image                   String?
  businessVisibility      Boolean?                  @default(false) @map("business_visibility")
  phoneVisibility         Boolean?                  @default(false) @map("phone_visibility")
  addressVisibility       Boolean?                  @default(false) @map("address_visibility")
  tax                     Decimal?                  @default(0)
  currency                String?                   @default("USD")
  terms                   String?
  policy                  String?
  googleRefreshToken      String?                   @map("google_refresh_token")
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at")
  companyLatitude         Float?
  companyLongitude        Float?
  zapierToken             String?                   @unique @db.VarChar(240)
  users                   User[]
  tasks                   Task[]
  clients                 Client[]
  services                Service[]
  vehicles                Vehicle[]
  invoices                Invoice[]
  calendarSettings        CalendarSettings[]
  appointments            Appointment[]
  emailTemplates          EmailTemplate[]
  materials               Material[]
  vendors                 Vendor[]
  labors                  Labor[]
  tags                    Tag[]
  categories              Category[]
  statuses                Status[]
  paymentMethods          PaymentMethod[]
  inventoryProducts       InventoryProduct[]
  VehicleColor            VehicleColor[]
  Source                  Source[]
  Payment                 Payment[]
  Coupon                  Coupon[]
  Technician              Technician[]
  companyJoinsAsOne       CompanyJoin[]             @relation("CompanyOne")
  companyJoinsAsTwo       CompanyJoin[]             @relation("CompanyTwo")
  companyEmailTemplate    CompanyEmailTemplate[]
  permissionForManager    PermissionForManager[]
  permissionForSales      PermissionForSales[]
  permissionForTechnician PermissionForTechnician[]
  permissionForOther      PermissionForOther[]
  permissions             Permission[]
  Lead                    Lead[]
  LeaveRequest            LeaveRequest[]
  RequestEstimateSent     RequestEstimate[]         @relation("SenderCompany")
  RequestEstimateReceived RequestEstimate[]         @relation("ReceiverCompany")
}

// notification settings model
model NotificationSettings {
  id            Int      @id @default(autoincrement())
  type          String   @unique @default("notification")
  notifications Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// create model that will handle multiple companies join and collaboration
model CompanyJoin {
  id           Int      @id @default(autoincrement())
  companyOneId Int
  companyTwoId Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  companyOne   Company  @relation(fields: [companyOneId], references: [id], onDelete: Cascade, name: "CompanyOne")
  companyTwo   Company  @relation(fields: [companyTwoId], references: [id], onDelete: Cascade, name: "CompanyTwo")
}

// User model.
// User can be employee or admin.
// When user registers, they have to create a company. So, every new user is an admin.
// After that, they can add employees to the company.
model User {
  id                Int               @id @default(autoincrement())
  firstName         String
  lastName          String?
  email             String            @unique
  emailVerifiedAt   DateTime?         @map("email_verified_at")
  image             String            @default("/images/default.png")
  password          String
  provider          Provider          @default(email)
  timezone          String            @default("UTC")
  phone             String?
  address           String?
  city              String?
  state             String?
  zip               String?
  companyName       String?           @map("company_name")
  commission        Decimal?          @default(0) @db.Decimal(10, 3)
  role              Role              @default(admin)
  employeeType      EmployeeType      @default(Admin)
  joinDate          DateTime?         @map("join_date")
  companyId         Int               @map("company_id")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @default(now()) @updatedAt @map("updated_at")
  company           Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  groups            Group[]           @relation("UserGroups")
  tasks             Task[]
  oauthTokens       OAuthToken[]
  taskUsers         TaskUser[]
  appointments      Appointment[]
  appointmentUsers  AppointmentUser[]
  invoices          Invoice[]         @relation("user")
  Technician        Technician[]
  permissions       Permission[]
  assignedInvoices  Invoice[]         @relation("assignedTo")
  LeaveRequest      LeaveRequest[]
  sentEstimates     RequestEstimate[] @relation("Sender")
  receivedEstimates RequestEstimate[] @relation("Receiver")

  @@index([companyId], name: "fk_users_company")
}

enum Provider {
  google
  apple
  email
}

enum Role {
  admin
  employee
}

enum EmployeeType {
  Admin
  Manager
  Sales
  Technician
  Other
}

// OAuth token for user.
// This is mainly used for google calendar integration.
model OAuthToken {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique @map("user_id")
  provider     String
  accessToken  String    @map("access_token")
  refreshToken String?   @map("refresh_token")
  expiresIn    DateTime? @map("expires_in")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "fk_oauth_tokens_user")
}

// Client of a company.
// Client is just data, they can't login.
model Client {
  id                     Int            @id @default(autoincrement())
  firstName              String         @map("first_name")
  lastName               String?        @map("last_name")
  mobile                 String?
  email                  String?
  address                String?
  city                   String?
  state                  String?
  zip                    String?
  photo                  String         @default("/images/default.png")
  fromRequest            Boolean?       @default(false) @map("from_request")
  fromRequestedCompanyId Int?           @map("from_requested_company_id")
  sourceId               Int?           @map("source_id")
  companyId              Int            @map("company_id")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @default(now()) @updatedAt @map("updated_at")
  company                Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customerCompany        String?        @map("customer_company")
  tagId                  Int?           @map("tag_id")
  notes                  String?
  appointments           Appointment[]
  source                 Source?        @relation(fields: [sourceId], references: [id])
  tag                    Tag?           @relation(fields: [tagId], references: [id])
  Vehicle                Vehicle[]
  Invoice                Invoice[]
  ClientCoupon           ClientCoupon[]
  Task                   Task[]

  @@index([companyId], name: "fk_customers_company")
  @@map("Client")
}

model Source {
  id        Int      @id @default(autoincrement())
  name      String
  companyId Int      @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Client    Client[]
}

// Vehicle of a company.
model Vehicle {
  id                     Int      @id @default(autoincrement())
  year                   Int?
  make                   String?
  model                  String?
  submodel               String?
  type                   String?
  transmission           String?
  engineSize             String?
  license                String?
  vin                    String?
  notes                  String?
  fromRequest            Boolean? @default(false) @map("from_request")
  fromRequestedCompanyId Int?     @map("from_requested_company_id")

  colorId      Int?          @map("color_id")
  clientId     Int?          @map("customer_id")
  companyId    Int           @map("company_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  color        VehicleColor? @relation(fields: [colorId], references: [id], onDelete: SetNull)
  client       Client?       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoices     Invoice[]
  requestEstimate RequestEstimate? @relation("Vehicle")

  @@index([companyId], name: "fk_vehicles_company")
}

model VehicleColor {
  id        Int       @id @default(autoincrement())
  name      String
  companyId Int       @map("company_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  Vehicle   Vehicle[]
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

// Invoice of a company.
// Note that `Invoice` is same as `Estimate`. So don't get confused.
// We can differentiate them by `type` field.
model Invoice {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at")
  type                    InvoiceType               @default(Invoice)
  clientId                Int?                      @map("customer_id")
  vehicleId               Int?                      @map("vehicle_id")
  subtotal                Decimal?                  @default(0) @db.Decimal(8, 2)
  discount                Decimal?                  @default(0) @db.Decimal(8, 2)
  tax                     Decimal?                  @default(0) @db.Decimal(8, 2)
  grandTotal              Decimal?                  @default(0) @map("grand_total") @db.Decimal(8, 2)
  deposit                 Decimal?                  @default(0) @db.Decimal(8, 2)
  depositNotes            String?                   @default("") @map("deposit_notes")
  depositMethod           String?                   @default("") @map("deposit_method")
  due                     Decimal?                  @default(0) @db.Decimal(8, 2)
  statusId                Int?                      @map("status_id")
  internalNotes           String?
  terms                   String?
  policy                  String?
  customerNotes           String?
  customerComments        String?
  companyId               Int                       @map("company_id")
  userId                  Int?                      @map("user_id")
  assignedToId            Int?                      @map("assigned_to")
  workOrderStatus         String?                   @default("Pending") @map("work_order_status")
  fromRequest             Boolean?                  @default(false) @map("from_request")
  fromRequestedCompanyId  Int?                      @map("from_requested_company_id")
  requestEstimateId       Int?                      @unique @map("request_estimate_id")
  company                 Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoiceItems            InvoiceItem[]
  photos                  InvoicePhoto[]
  tasks                   Task[]
  status                  Status?                   @relation(fields: [statusId], references: [id])
  payments                Payment[]
  user                    User?                     @relation(name: "user", fields: [userId], references: [id], onDelete: SetNull)
  Material                Material[]
  InventoryProductHistory InventoryProductHistory[]
  vehicle                 Vehicle?                  @relation(fields: [vehicleId], references: [id])
  client                  Client?                   @relation(fields: [clientId], references: [id])
  technician              Technician[]
  tags                    InvoiceTags[]
  requestEstimate         RequestEstimate?          @relation(fields: [requestEstimateId], onDelete: SetNull, references: [id])
  assignedTo              User?                     @relation(name: "assignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)

  @@index([companyId], name: "fk_invoices_company")
}

model InvoiceTags {
  id        Int      @id @default(autoincrement())
  invoiceId String   @map("invoice_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([invoiceId], name: "fk_invoice_tags_invoice")
  @@index([tagId], name: "fk_invoice_tags_tag")
}

enum InvoiceType {
  Invoice
  Estimate
}

// Photo of a invoice.
// One invoice can have multiple photos.
model InvoicePhoto {
  id        Int      @id @default(autoincrement())
  invoiceId String   @map("invoice_id")
  photo     String   @db.VarChar(1024)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId], name: "fk_invoice_photos_invoice")
}

// InvoiceItem of a invoice.
// Its a holder for service, material and labor.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem can have one service, material and labor.
// Its dependant on invoice. So, invoiceItem can't be in multiple invoices.
model InvoiceItem {
  id        Int        @id @default(autoincrement())
  invoiceId String?    @map("invoice_id")
  serviceId Int?       @map("service_id")
  laborId   Int?       @map("labor_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  invoice   Invoice?   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service   Service?   @relation(fields: [serviceId], references: [id])
  labor     Labor?     @relation(fields: [laborId], references: [id])
  materials Material[]
  ItemTag   ItemTag[]
}

enum InvoiceItemMaterialType {
  Material
  Product
}

// Service of a invoice.
// Service is a part of InvoiceItem.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem can have one service.
// Service itself is an independant model, So one service can be in multiple invoices.
// And if you want to fetch services for a client, you need to fetch all invoices and then all invoice items and then you'll get services.
model Service {
  id                     Int           @id @default(autoincrement())
  createdAt              DateTime      @default(now()) @map("created_at")
  updatedAt              DateTime      @default(now()) @updatedAt @map("updated_at")
  name                   String
  description            String?
  fromRequest            Boolean?      @default(false) @map("from_request")
  fromRequestedCompanyId Int?          @map("from_requested_company_id")
  categoryId             Int?          @map("category_id")
  companyId              Int           @map("company_id")
  company                Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category               Category?     @relation(fields: [categoryId], references: [id])
  invoiceItems           InvoiceItem[]
  Technician             Technician[]
  requestEstimate RequestEstimate? @relation("Service")

  @@index([companyId], name: "fk_services_company")
}

// Material of a invoice.
// Material is a part of InvoiceItem.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem can have one material.
// Material itself is an independant model, So one material can be in multiple invoices.
// And if you want to fetch materials for a client, you need to fetch all invoices and then all invoice items and then you'll get materials.
model Material {
  id            Int      @id @default(autoincrement())
  name          String
  vendorId      Int?     @map("vendor_id")
  categoryId    Int?     @map("category_id")
  notes         String?
  quantity      Int?
  cost          Decimal?
  sell          Decimal?
  discount      Decimal?
  companyId     Int      @map("company_id")
  invoiceId     String?  @map("invoice_id")
  invoiceItemId Int?     @map("invoice_item_id")
  productId     Int?     @map("product_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  vendor      Vendor?           @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  category    Category?         @relation(fields: [categoryId], references: [id])
  tags        MaterialTag[]
  invoiceItem InvoiceItem?      @relation(fields: [invoiceItemId], references: [id], onDelete: Cascade)
  product     InventoryProduct? @relation(fields: [productId], references: [id])
  invoice     Invoice?          @relation(fields: [invoiceId], references: [id])

  @@index([companyId], name: "fk_materials_company")
}

// Vendor of a company.
// Vendor is just data, they can't login.
// Vendor is a part of Material.
model Vendor {
  id                      Int                       @id @default(autoincrement())
  name                    String
  website                 String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zip                     String?
  // company name for vendor. Its not related to company model.
  companyName             String?
  notes                   String?
  companyId               Int                       @map("company_id")
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at")
  company                 Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  material                Material[]
  inventoryProducts       InventoryProduct[]
  InventoryProductHistory InventoryProductHistory[]
}

// Labor of a invoice.
// Labor is a part of InvoiceItem.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem can have one labor.
// Labor itself is an independant model, So one labor can be in multiple invoices.
// And if you want to fetch labors for a customer, you need to fetch all invoices and then all invoice items and then you'll get labors.
model Labor {
  id           Int           @id @default(autoincrement())
  name         String
  categoryId   Int?          @map("category_id")
  notes        String?
  hours        Int?
  charge       Decimal? // per hour
  discount     Decimal?
  companyId    Int           @map("company_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category     Category?     @relation(fields: [categoryId], references: [id])
  invoiceItems InvoiceItem[]
  tags         LaborTag[]
}

// Tag for a invoice.
// Tag is a part of InvoiceItem, Material and Labor.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem, Material and Labor can have multiple tags.
// Tag itself is an independant model, So one tag can be in multiple invoices.
model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  textColor String // hex (with #)
  bgColor   String // hex (with #)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  companyId Int      @map("company_id")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  items       ItemTag[]
  materials   MaterialTag[]
  labors      LaborTag[]
  Client      Client[]
  InvoiceTags InvoiceTags[]
}

// Many to many relation between Item and Tag.
model ItemTag {
  itemId Int
  tagId  Int
  item   InvoiceItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag    Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([itemId, tagId])
}

// Many to many relation between Material and Tag.
model MaterialTag {
  materialId Int      @map("material_id")
  tagId      Int      @map("tag_id")
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([materialId, tagId])
}

// Many to many relation between Labor and Tag.
model LaborTag {
  laborId Int   @map("labor_id")
  tagId   Int   @map("tag_id")
  labor   Labor @relation(fields: [laborId], references: [id], onDelete: Cascade)
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([laborId, tagId])
}

// Category of a invoice.
// Category is a part of Service, Material and Labor.
// It's an independant model. So, one category can be in multiple services, materials and labors.
model Category {
  id                Int                @id @default(autoincrement())
  name              String
  companyId         Int                @map("company_id")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")
  services          Service[]
  materials         Material[]
  labors            Labor[]
  inventoryProducts InventoryProduct[]
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

// Status of a invoice.
// Status is an independant model. So, one status can be in multiple invoices.
model Status {
  id        Int       @id @default(autoincrement())
  name      String
  textColor String // hex (with #)
  bgColor   String // hex (with #)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  companyId Int       @map("company_id")
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Invoice   Invoice[]
}

// Payment of a invoice.
// One invoice can have one payment. And one payment can't be in multiple invoices.
// Payment can be of type card, check, cash or other.
// If payment type is other, then it can have a payment method.
// If payment type is card, then it can have a card type.
model Payment {
  id        Int           @id @default(autoincrement())
  date      DateTime?
  notes     String?
  amount    Decimal?
  type      PaymentType
  card      CardPayment?
  check     CheckPayment?
  cash      CashPayment?
  other     OtherPayment?
  invoiceId String?       @map("invoice_id")
  companyId Int           @map("company_id")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
  invoice   Invoice?      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  Company   Company?      @relation(fields: [companyId], references: [id])
}

model CardPayment {
  id         Int      @id @default(autoincrement())
  paymentId  Int      @unique
  creditCard String?
  cardType   CardType
  payment    Payment  @relation(fields: [paymentId], references: [id])
}

model CheckPayment {
  id          Int     @id @default(autoincrement())
  paymentId   Int     @unique
  checkNumber String?
  payment     Payment @relation(fields: [paymentId], references: [id])
}

model CashPayment {
  id           Int     @id @default(autoincrement())
  paymentId    Int     @unique
  receivedCash Float?
  payment      Payment @relation(fields: [paymentId], references: [id])
}

model OtherPayment {
  id              Int            @id @default(autoincrement())
  paymentId       Int            @unique
  paymentMethodId Int?
  payment         Payment        @relation(fields: [paymentId], references: [id])
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id        Int            @id @default(autoincrement())
  name      String
  companyId Int            @map("company_id")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")
  payments  OtherPayment[]
  company   Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum PaymentType {
  CARD
  CHECK
  CASH
  OTHER
}

enum CardType {
  MASTERCARD
  VISA
  AMEX
  OTHER
}

// Calendar settings for a company.
model CalendarSettings {
  id        Int      @id @default(autoincrement())
  companyId Int      @unique @map("company_id")
  weekStart String
  dayStart  String
  dayEnd    String
  weekend1  String   @default("Saturday")
  weekend2  String   @default("Sunday")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

// Task for a company.
model Task {
  id            Int        @id @default(autoincrement())
  title         String     @db.VarChar(100)
  description   String?
  date          DateTime?
  startTime     String?    @map("start_time")
  endTime       String?    @map("end_time")
  priority      Priority
  taskUser      TaskUser[]
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at")
  userId        Int        @map("user_id")
  companyId     Int        @map("company_id")
  invoiceId     String?    @map("invoice_id")
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  company       Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Invoice       Invoice?   @relation(fields: [invoiceId], references: [id])
  clientId      Int?       @map("client_id")
  client        Client?    @relation(fields: [clientId], references: [id])
  googleEventId String?
}

enum Priority {
  Low
  Medium
  High
}

// Assigned user for a task.
// One task can have multiple users.
model TaskUser {
  id        Int      @id @default(autoincrement())
  taskId    Int      @map("task_id")
  userId    Int      @map("user_id")
  eventId   String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Appointment for a company.
model Appointment {
  id                              Int               @id @default(autoincrement())
  userId                          Int               @map("user_id")
  title                           String            @db.VarChar(100)
  date                            DateTime?
  startTime                       String?           @map("start_time")
  endTime                         String?           @map("end_time")
  companyId                       Int               @map("company_id")
  clientId                        Int?              @map("customer_id")
  vehicleId                       Int?              @map("vehicle_id")
  draftEstimate                   String?           @map("draft_estimate")
  notes                           String?
  confirmationEmailTemplateId     Int?              @map("confirmation_email_template_id")
  confirmationEmailTemplateStatus Boolean           @default(false) @map("confirmation_email_template_status")
  reminderEmailTemplateId         Int?              @map("reminder_email_template_id")
  reminderEmailTemplateStatus     Boolean           @default(false) @map("reminder_email_template_status")
  times                           Json? // { time: string; date: string }
  createdAt                       DateTime          @default(now()) @map("created_at")
  updatedAt                       DateTime          @default(now()) @updatedAt @map("updated_at")
  user                            User              @relation(fields: [userId], references: [id])
  company                         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appointmentUsers                AppointmentUser[]
  client                          Client?           @relation(fields: [clientId], references: [id])
  vehicle                         Vehicle?          @relation(fields: [vehicleId], references: [id])
  googleEventId                   String?

  @@index([userId], name: "fk_tasks_user")
  @@index([companyId], name: "fk_tasks_company")
}

// Assigned user for an appointment.
model AppointmentUser {
  id            Int         @id @default(autoincrement())
  appointmentId Int         @map("appointment_id")
  userId        Int         @map("user_id")
  eventId       String      @db.VarChar(100)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Technician of a InvoiceItem.
// One InvoiceItem can have multiple technicians.
model Technician {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  date       DateTime? @map("assigned_date")
  dateClosed DateTime? @map("date_closed")
  due        DateTime? @default(now())
  amount     Decimal?  @default(0)
  priority   Priority? @default(Low)
  status     String?
  note       String?   @map("new_note")
  serviceId  Int       @map("service_id")
  invoiceId  String    @map("invoice_id")
  companyId  Int       @map("company_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  invoice Invoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  company Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

// Email template for a company.
model EmailTemplate {
  id        Int               @id @default(autoincrement())
  subject   String
  message   String?           @db.Text
  type      EmailTemplateType
  companyId Int               @map("company_id")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @default(now()) @updatedAt @map("updated_at")
  company   Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum EmailTemplateType {
  Confirmation
  Reminder
}

model InventoryProduct {
  id                      Int                       @id @default(autoincrement())
  name                    String
  description             String?
  categoryId              Int?                      @map("category_id")
  quantity                Int?                      @default(1)
  price                   Decimal?                  @default(0)
  unit                    String?                   @default("pc")
  lot                     String?
  vendorId                Int?                      @map("vendor_id")
  type                    InventoryProductType
  receipt                 String?
  lowInventoryAlert       Int?                      @map("low_inventory_alert")
  companyId               Int                       @map("company_id")
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at")
  company                 Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category                Category?                 @relation(fields: [categoryId], references: [id])
  vendor                  Vendor?                   @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  InventoryProductHistory InventoryProductHistory[]
  // InvoiceItemMaterial     InvoiceItemMaterial[]
  Material                Material[]
}

model InventoryProductHistory {
  id        Int                         @id @default(autoincrement())
  price     Decimal?                    @default(0)
  quantity  Int
  date      DateTime?                   @default(now())
  notes     String?
  type      InventoryProductHistoryType
  productId Int                         @map("inventory_id")
  invoiceId String?                     @map("invoice_id")
  vendorId  Int?                        @map("vendor_id")
  createdAt DateTime                    @default(now()) @map("created_at")
  updatedAt DateTime                    @default(now()) @updatedAt @map("updated_at")
  product   InventoryProduct            @relation(fields: [productId], references: [id], onDelete: Cascade)
  invoice   Invoice?                    @relation(fields: [invoiceId], references: [id])
  vendor    Vendor?                     @relation(fields: [vendorId], references: [id], onDelete: SetNull)
}

enum InventoryProductHistoryType {
  Purchase
  Sale
}

enum InventoryProductType {
  Supply
  Product
}

// Message for chat.
model Message {
  id         Int         @id @default(autoincrement())
  to         Int?
  message    String
  from       Int
  groupId    Int?        @map("group_id")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")
  requestEstimateId Int? @map("request_estimate_id") @unique
  group      Group?      @relation(fields: [groupId], references: [id])
  attachment Attachment?
  requestEstimate           RequestEstimate?                    @relation("Message", fields: [requestEstimateId], references: [id])

  @@index([to], name: "fk_messages_to")
  @@index([from], name: "fk_messages_from")
  @@index([groupId], name: "fk_messages_group")
}

model Attachment {
  id        Int      @id @default(autoincrement())
  fileName  String // File name (e.g., 'image.png')
  fileType  String // File type (e.g., 'image/png', 'application/pdf')
  fileUrl   String // File storage path or URL
  fileSize  String
  messageId Int      @unique // Foreign key to Message model, enforces one-to-one relationship
  message   Message  @relation(fields: [messageId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String
  type      String    @default("Group")
  users     User[]    @relation("UserGroups")
  messages  Message[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
}

model Coupon {
  id           Int            @id @default(autoincrement())
  name         String
  code         String
  type         String
  startDate    DateTime
  endDate      DateTime
  discount     Decimal
  discountType DiscountType
  status       CouponStatus
  redemptions  Int
  companyId    Int            @map("company_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  ClientCoupon ClientCoupon[]
}

enum CouponStatus {
  Active
  Expired
}

enum DiscountType {
  Percentage
  Fixed
}

model ClientCoupon {
  id        Int      @id @default(autoincrement())
  couponId  Int      @map("coupon_id")
  clientId  Int      @map("client_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Column {
  id    Int    @id @default(autoincrement())
  title String
  type  String // "sales" or "shop"
  order Int
}

// TODO: this might need to be renamed
model CompanyEmailTemplate {
  id        Int      @id @default(autoincrement())
  subject   String
  message   String?  @db.Text
  companyId Int      @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("companyEmailTemplate")
}

model PermissionForManager {
  id                            Int     @id @default(autoincrement())
  companyId                     Int     @map("company_id")
  communicationHubInternal      Boolean @default(true) @map("communication_hub_internal")
  communicationHubClients       Boolean @default(true) @map("communication_hub_clients")
  communicationHubCollaboration Boolean @default(true) @map("communication_hub_collaboration")
  estimatesInvoices             Boolean @default(true) @map("estimates_invoices")
  calendarTask                  Boolean @default(true) @map("calendar_task")
  payments                      Boolean @default(true)
  workforceManagement           Boolean @default(true) @map("workforce_management")
  reporting                     Boolean @default(true)
  inventory                     Boolean @default(true)
  integrations                  Boolean @default(false)
  salesPipeline                 Boolean @default(true) @map("sales_pipeline")
  shopPipeline                  Boolean @default(true) @map("shop_pipeline")
  businessSettings              Boolean @default(false) @map("business_settings")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model PermissionForSales {
  id                            Int     @id @default(autoincrement())
  companyId                     Int     @map("company_id")
  communicationHubInternal      Boolean @default(true) @map("communication_hub_internal")
  communicationHubClients       Boolean @default(true) @map("communication_hub_clients")
  communicationHubCollaboration Boolean @default(true) @map("communication_hub_collaboration")
  estimatesInvoices             Boolean @default(true) @map("estimates_invoices")
  calendarTask                  Boolean @default(true) @map("calendar_task")
  payments                      Boolean @default(false)
  salesPipeline                 Boolean @default(true) @map("sales_pipeline")
  //view only
  workforceManagementViewOnly Boolean @default(true) 
  reportingViewOnly           Boolean @default(true)
  inventoryViewOnly           Boolean @default(true)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model PermissionForTechnician {
  id                       Int     @id @default(autoincrement())
  companyId                Int     @map("company_id")
  communicationHubInternal Boolean @default(true) @map("communication_hub_internal")
  calendarTask             Boolean @default(true) @map("calendar_task")
  shopPipeline             Boolean @default(true) @map("shop_pipeline")

  //view only
  workforceManagementViewOnly Boolean @default(true) 
  reportingViewOnly           Boolean @default(true)

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model PermissionForOther {
  id                            Int     @id @default(autoincrement())
  companyId                     Int     @map("company_id")
  communicationHubInternal      Boolean @default(false) @map("communication_hub_internal")
  communicationHubClients       Boolean @default(false) @map("communication_hub_clients")
  communicationHubCollaboration Boolean @default(false) @map("communication_hub_collaboration")
  estimatesInvoices             Boolean @default(false) @map("estimates_invoices")
  calendarTask                  Boolean @default(false) @map("calendar_task")
  payments                      Boolean @default(false)
  workforceManagement           Boolean @default(false) @map("workforce_management")
  reporting                     Boolean @default(false)
  inventory                     Boolean @default(false)
  integrations                  Boolean @default(false)
  salesPipeline                 Boolean @default(false) @map("sales_pipeline")
  shopPipeline                  Boolean @default(false) @map("shop_pipeline")
  businessSettings              Boolean @default(false) @map("business_settings")
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Permission {
  id                            Int     @id @default(autoincrement())
  userId                        Int     @map("user_id")
  companyId                     Int     @map("company_id")
  communicationHubInternal      Boolean @default(false) @map("communication_hub_internal")
  communicationHubClients       Boolean @default(false) @map("communication_hub_clients")
  communicationHubCollaboration Boolean @default(false) @map("communication_hub_collaboration")
  estimatesInvoices             Boolean @default(false) @map("estimates_invoices")
  calendarTask                  Boolean @default(false) @map("calendar_task")
  payments                      Boolean @default(false)
  workforceManagement           Boolean @default(false) @map("workforce_management")
  reporting                     Boolean @default(false)
  inventory                     Boolean @default(false)
  integrations                  Boolean @default(false)
  salesPipeline                 Boolean @default(false) @map("sales_pipeline")
  shopPipeline                  Boolean @default(false) @map("shop_pipeline")
  businessSettings              Boolean @default(false) @map("business_settings")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Lead {
  id          Int      @id @default(autoincrement())
  clientName  String   @map("client_name")
  clientEmail String?  @map("client_email")
  clientPhone String?  @map("client_phone")
  vehicleInfo String   @map("vehicle_info")
  services    String
  source      String
  comments    String?
  companyId   Int      @map("company_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model LeaveRequest {
  id          Int                @id @default(autoincrement())
  userId      Int                @map("user_id")
  startDate   DateTime           @map("start_date")
  endDate     DateTime           @map("end_date")
  status      LeaveRequestStatus
  title       String
  description String
  companyId   Int                @map("company_id")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @default(now()) @updatedAt @map("updated_at")
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum LeaveRequestStatus {
  Pending
  Approved
  Rejected
}

model RequestEstimate {
  id                Int                         @id @default(autoincrement())
  senderId          Int                         @map("sender_id")
  senderCompanyId   Int                         @map("sender_company_id")
  receiverId        Int                         @map("receiver_id")
  receiverCompanyId Int                         @map("receiver_company_id")
  // vehicleYear       String                      @map("vehicle_year")
  // vehicleMake       String                      @map("vehicle_make")
  // vehicleModel      String                      @map("vehicle_model")
  vehicleId          Int                         @map("vehicle_id")@unique
  serviceId          Int                        @map("service_id")@unique
  // service           String
  // due               DateTime
  // notes             String?
  invoiceId           String                    @map("invoice_id")
  createdAt         DateTime                    @default(now()) @map("created_at")
  updatedAt         DateTime                    @default(now()) @updatedAt @map("updated_at")
  sender            User                        @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver          User                        @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  senderCompany     Company                     @relation("SenderCompany", fields: [senderCompanyId], references: [id], onDelete: Cascade)
  receiverCompany   Company                     @relation("ReceiverCompany", fields: [receiverCompanyId], references: [id], onDelete: Cascade)
  // attachments       RequestEstimateAttachment[]
  invoice           Invoice?
  vehicle          Vehicle?                    @relation("Vehicle", fields: [vehicleId], references: [id], onDelete: Cascade)
  service           Service?                    @relation("Service", fields: [serviceId], references: [id], onDelete: Cascade)
  message           Message?                     @relation("Message")
}

// model RequestEstimateAttachment {
//   id        Int             @id @default(autoincrement())
//   fileName  String
//   fileType  String
//   fileUrl   String
//   requestId Int             @map("request_id")
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @default(now()) @updatedAt @map("updated_at")
//   request   RequestEstimate @relation(fields: [requestId], references: [id], onDelete: Cascade)
// }
