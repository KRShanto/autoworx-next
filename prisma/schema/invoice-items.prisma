// InvoiceItem of a invoice.
// Its a holder for service, material and labor.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem can have one service, material and labor.
// Its dependant on invoice. So, invoiceItem can't be in multiple invoices.
model InvoiceItem {
    id        Int        @id @default(autoincrement())
    invoiceId String?    @map("invoice_id")
    serviceId Int?       @map("service_id")
    laborId   Int?       @map("labor_id")
    createdAt DateTime   @default(now()) @map("created_at")
    updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
    invoice   Invoice?   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    service   Service?   @relation(fields: [serviceId], references: [id])
    labor     Labor?     @relation(fields: [laborId], references: [id])
    materials Material[]
    ItemTag   ItemTag[]
}

enum InvoiceItemMaterialType {
    Material
    Product
}

// Service of a invoice.
// Service is a part of InvoiceItem.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem can have one service.
// Service itself is an independant model, So one service can be in multiple invoices.
// And if you want to fetch services for a client, you need to fetch all invoices and then all invoice items and then you'll get services.
model Service {
    id                     Int              @id @default(autoincrement())
    createdAt              DateTime         @default(now()) @map("created_at")
    updatedAt              DateTime         @default(now()) @updatedAt @map("updated_at")
    name                   String
    description            String?
    fromRequest            Boolean?         @default(false) @map("from_request")
    fromRequestedCompanyId Int?             @map("from_requested_company_id")
    categoryId             Int?             @map("category_id")
    companyId              Int              @map("company_id")
    company                Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
    category               Category?        @relation(fields: [categoryId], references: [id])
    invoiceItems           InvoiceItem[]
    Technician             Technician[]
    requestEstimate        RequestEstimate? @relation("Service")
    InvoiceRedo            InvoiceRedo[]

    @@index([companyId], name: "fk_services_company")
}

// Material of a invoice.
// Material is a part of InvoiceItem.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem can have one material.
// Material itself is an independant model, So one material can be in multiple invoices.
// And if you want to fetch materials for a client, you need to fetch all invoices and then all invoice items and then you'll get materials.
model Material {
    id            Int      @id @default(autoincrement())
    name          String
    vendorId      Int?     @map("vendor_id")
    categoryId    Int?     @map("category_id")
    notes         String?
    quantity      Int?
    cost          Decimal?
    sell          Decimal?
    discount      Decimal?
    companyId     Int      @map("company_id")
    invoiceId     String?  @map("invoice_id")
    invoiceItemId Int?     @map("invoice_item_id")
    productId     Int?     @map("product_id")
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

    company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
    vendor      Vendor?           @relation(fields: [vendorId], references: [id], onDelete: SetNull)
    category    Category?         @relation(fields: [categoryId], references: [id])
    tags        MaterialTag[]
    invoiceItem InvoiceItem?      @relation(fields: [invoiceItemId], references: [id], onDelete: Cascade)
    product     InventoryProduct? @relation(fields: [productId], references: [id])
    invoice     Invoice?          @relation(fields: [invoiceId], references: [id])

    @@index([companyId], name: "fk_materials_company")
}

// Labor of a invoice.
// Labor is a part of InvoiceItem.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem can have one labor.
// Labor itself is an independant model, So one labor can be in multiple invoices.
// And if you want to fetch labors for a customer, you need to fetch all invoices and then all invoice items and then you'll get labors.
model Labor {
    id           Int           @id @default(autoincrement())
    name         String
    categoryId   Int?          @map("category_id")
    notes        String?
    hours        Int?
    charge       Decimal? // per hour
    discount     Decimal?
    companyId    Int           @map("company_id")
    cannedLabor  Boolean?      @default(false) @map("canned_labor")
    createdAt    DateTime      @default(now()) @map("created_at")
    updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
    company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
    category     Category?     @relation(fields: [categoryId], references: [id])
    invoiceItems InvoiceItem[]
    tags         LaborTag[]
}

// Tag for a invoice.
// Tag is a part of InvoiceItem, Material and Labor.
// One invoice can have multiple InvoiceItems.
// And one InvoiceItem, Material and Labor can have multiple tags.
// Tag itself is an independant model, So one tag can be in multiple invoices.
model Tag {
    id        Int      @id @default(autoincrement())
    name      String
    textColor String // hex (with #)
    bgColor   String // hex (with #)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
    companyId Int      @map("company_id")
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

    items               ItemTag[]
    materials           MaterialTag[]
    labors              LaborTag[]
    Client              Client[]
    InvoiceTags         InvoiceTags[]
    InventoryProductTag InventoryProductTag[]
}

// Many to many relation between Item and Tag.
model ItemTag {
    itemId Int
    tagId  Int
    item   InvoiceItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
    tag    Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@id([itemId, tagId])
}

// Many to many relation between Material and Tag.
model MaterialTag {
    materialId Int      @map("material_id")
    tagId      Int      @map("tag_id")
    material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
    tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@id([materialId, tagId])
}

// Many to many relation between Labor and Tag.
model LaborTag {
    laborId Int   @map("labor_id")
    tagId   Int   @map("tag_id")
    labor   Labor @relation(fields: [laborId], references: [id], onDelete: Cascade)
    tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@id([laborId, tagId])
}
